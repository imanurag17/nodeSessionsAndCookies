1. session are stored on the server side
  - session data is stored in a cookie on the client side
  - session data is stored in a database
  - npm install --save express-session
  - initialize session middleware in your Express app - app.use(session())
2. cookie are stored on the client side
3. connect session to a database like MongoDB using connect-mongo
  - npm install --save connect-mongodb-session
  - configure the session store to use MongoDB - const store = new MongoDBStore()
  - pass the store to the session middleware - app.use(session({ store: store }))

4. encrypt passwords using bcrypt
  - npm install --save bcryptjs
  - hash passwords before storing them in the database - bcrypt.hash(string, saltValues)
    - string - the value to be hashed
    - saltValues - number of rounds to process the data for hashing 
  - this is an asynchronous operation that returns a promise
  - compare hashed passwords during login - bcrypt.compare()
    - with compare, we only face errors (in catch block) if something goes wrong not if the 
    passwords do not match

5. route protection using middleware
  - create a middleware function to check if the user is authenticated
  - if not authenticated, redirect to login page
  - apply this middleware to routes that require authentication

6. CSRF (Cross-Site Request Forgery) protection
  - npm install --save csurf
  - initialize CSRF protection middleware in your Express app - app.use(csurf())
  - include CSRF tokens in forms and AJAX requests to protect against CSRF attacks
